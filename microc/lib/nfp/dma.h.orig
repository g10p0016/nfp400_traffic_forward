#ifndef _DMA_H_
#define _DMA_H_

//#include <nfp6000/nfp_pcie.h>

#define NFP_PCIE_BAR_CONFIG        0x30000
#define NFP_PCIE_DMA_CONTROLER     0x40000
#define NFP_PCIE_ISLAND            0x00000
#define NFP_DESCRIPTOR_CFG0        0x400C0
#define NFP_DMA_ADDRESS_BASE       0x00000 //driver will write address here
#define NFP_PCIE_WRITE_DESCRIPTOR_OFFEST   0x00000
#define NFP_PCIE_READ_DESCRIPTOR_OFFEST   0x0000060
#define DMA_BUFFER_COUNT  8

//------------------------------------------------------------------------------
#define DMA_BUFFER_SIZE_WORDS 256
#define DMA_HEADER_OVERHEAD 6
#define DMA_PAYLOAD_MAX_BYTES (DMA_BUFFER_SIZE_WORDS - DMA_HEADER_OVERHEAD)*4

/*
The message header contains manager specific informaion and encapsulates the
message under transmission.
source_signal: a signal associated with the source manager. can be used to relay
               an acknowledgement signal.
*/
struct message_header {
	unsigned int source_signal;
	unsigned int size;
};
/*
The message body contains details on the actual message under transmission.
 size: the size of the message (size variable inclusive).
 source_id:      Id of the processing intiating the message pass event.
 target_id:      Id of the destination process. Will be a single 32bit value
 								 containing both the signal to assert on the target context and
								 the register to write engine return address into.
 message:   The actual message payload in bytes. Payloads have a maximun size of
            DMA_PAYLOAD_MAX_BYTES which will be set to optimise byte allignment.
*/
struct message_body {
  unsigned int size;
  unsigned int source_id;
  unsigned int target_id;
	unsigned int target_address;
  unsigned int message[DMA_BUFFER_SIZE_WORDS - DMA_HEADER_OVERHEAD];
};
/*
The actual message struct. Reserved memory will be comprised  of a series of
these objects which will sleep untill their header size is greater thatn 0.
*/
struct dma_message {
  union {
    struct {
      struct message_header header;
      struct message_body body;
    };
    unsigned int raw[DMA_BUFFER_SIZE_WORDS];
  };

};
//------------------------------------------------------------------------------

struct dma_descriptor {
    union {
        struct {
          unsigned int cpp_addr_lo:32;
          unsigned int mode_sel:2;
          unsigned int dma_mode:16;
          unsigned int cpp_token:2;
          unsigned int dma_cfg_index:4;
          unsigned int cpp_addr_hi:8;
          unsigned int pcie_addr_lo:32;
          unsigned int length:12;
          unsigned int rid:8;
          unsigned int rid_override:1;
          unsigned int trans_class:3;
          unsigned int pcie_addr_hi:8;
        };
        unsigned int raw[4];
    };
};
void dma_read_init(unsigned int sync_signal);
void dma_read(unsigned int message);
void dma_write_init();
void dma_write(unsigned int message, unsigned int size);
void dma_clear_size();



#endif /* _DMA_H_ */
